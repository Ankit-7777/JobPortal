name: Docker CI/CD Pipeline

# This workflow automates Docker image builds, signs the images using cosign, and pushes them to a registry.

on:
  schedule:
    - cron: '17 5 * * *'  # Schedule the job to run daily at 5:17 AM UTC
  push:
    branches: [ "main" ]   # Run the workflow on pushes to the 'main' branch
    tags: [ 'v*.*.*' ]     # Run the workflow on tagged releases (semantic versioning)
  pull_request:
    branches: [ "main" ]   # Run the workflow on pull requests to the 'main' branch

env:
  # Use GitHub Container Registry (GHCR) if Docker Hub is not specified
  REGISTRY: ghcr.io
  # Image name is set from the GitHub repository in the form <user>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest  # Define the runner environment

    permissions:
      contents: read       # Read repository content
      packages: write      # Write permissions to packages
      id-token: write      # ID token for signing with Cosign (outside PRs)

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install Cosign for image signing (skip on pull requests)
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Step 3: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      # Step 4: Log in to Docker Hub or GitHub Container Registry
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Extract metadata such as image tags and labels
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Step 6: Build and push the Docker image (skip push on pull requests)
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5.0.0
        with:
          context: .  # Docker context (root of the repository)
          push: ${{ github.event_name != 'pull_request' }}  # Only push on non-PR events
          platforms: linux/amd64,linux/arm64  # Support multi-platform builds
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Step 7: Sign the Docker image with Cosign (only for non-PRs)
      - name: Sign the Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      # Step 8: Verify the signed Docker image (optional)
      - name: Verify signed Docker image
        if: ${{ github.event_name != 'pull_request' }}
        run: cosign verify --keyless ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
